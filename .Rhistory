y_ln_test<-predict(modelo_ln_train,test_datos_automoviles[,c("VENTAS")],type="response")
y_ln_test<-predict(modelo_ln_train,test_datos_automoviles[,c("VENTAS")])
modelo_ln_train<-lm(GASTOFINANCIERO~VENTAS,data=train_datos_automoviles,
subset=(SUBSECTOR=="AUTOMOTORES"))
summary(modelo_ln_train)
y_ln_test<-predict(modelo_ln_train,test_datos_automoviles[,c("VENTAS")])
y_ln_test<-predict(modelo_ln_train,newdata=test_datos_automoviles[,c("VENTAS")])
y_ln_test<-predict(modelo_ln_train,newdata=test_datos_automoviles[,c("VENTAS")])
new <- data.frame(VENTAS = test_datos_automoviles$VENTAS)
y_ln_test<-predict(modelo_ln_train,newdata=test_datos_automoviles[,c("VENTAS")])
new <- data.frame(VENTAS = test_datos_automoviles$VENTAS)
y_ln_test<-predict(modelo_ln_train,newdata=test_datos_automoviles[,c("VENTAS")])
new <- data.frame(VENTAS = test_datos_automoviles$VENTAS)
View(new)
y_ln_test<-predict(modelo_ln_train,newdata=new)
y_test_pred <- exp(-4.4968)*exp(y_ln_test)
plot(test_datos_automoviles$GASTOFINANCIERO,y_test_pred,
xlab="Ventas (log, COP, miles de millones)",ylab = "Gasto financiero (log, COP, miles de millones)",main="Ventas vs gasto financiero (2015), Edificaciones",
las=1)
abline(modelo_ln_train,col="red",lwd=2)
grid()
legend("bottomright",legend = c("Observados","Ajuste lineal"),pch=c(1,NA),lty=c(NA,1),
col=c(1,2),lwd=c(1,2))
plot(test_datos_automoviles$GASTOFINANCIERO,y_test_pred,
xlab="Ventas (log, COP, miles de millones)",ylab = "Gasto financiero (log, COP, miles de millones)",main="Ventas vs gasto financiero (2015), Edificaciones",
las=1)
grid()
legend("bottomright",legend = c("Observados","Ajuste lineal"),pch=c(1,NA),lty=c(NA,1),
col=c(1,2),lwd=c(1,2))
plot(test_datos_automoviles$GASTOFINANCIERO,y_test_pred,
xlab="GASTO FINANCIERO REAL",ylab = "GAsTO FINANCIERO ESTIMADO",main="GAsto Financiero REal Vs EStimado, Edificaciones",
las=1)
grid()
legend("bottomright",legend = c("Observados","Ajuste lineal"),pch=c(1,NA),lty=c(NA,1),
col=c(1,2),lwd=c(1,2))
plot(test_datos_automoviles$GASTOFINANCIERO,y_test_pred,
xlab="GASTO FINANCIERO REAL",ylab = "GAsTO FINANCIERO ESTIMADO",main="GAsto Financiero Real Vs EStimado, Automotores",
las=1)
grid()
legend("bottomright",legend = c("Observados","Ajuste lineal"),pch=c(1,NA),lty=c(NA,1),
col=c(1,2),lwd=c(1,2))
plot(test_datos_automoviles$GASTOFINANCIERO,y_test_pred,
xlab="GASTO FINANCIERO REAL",ylab = "GAsTO FINANCIERO ESTIMADO",main="GAsto Financiero Real Vs EStimado, Automotores",
las=1)
grid()
legend("bottomright",legend = c("dato"),pch=c(1,NA),lty=c(NA,1),
col=c(1,2),lwd=c(1,2))
plot(test_datos_automoviles$GASTOFINANCIERO,y_test_pred,
xlab="GASTO FINANCIERO REAL",ylab = "GASTO FINANCIERO ESTIMADO",main="GAsto Financiero Real Vs EStimado, Automotores",
las=1)
grid()
legend("bottomright",legend = c("dato"),pch=c(1,NA),lty=c(NA,1),
col=c(1,2),lwd=c(1,2))
SOLO_VENTAS <- data.frame(VENTAS = test_datos_automoviles$VENTAS)
ln_SOLO_VENTAS <- ln(SOLO_VENTAS)
SOLO_VENTAS <- data.frame(VENTAS = test_datos_automoviles$VENTAS)
ln_SOLO_VENTAS <- log(SOLO_VENTAS)
y_ln_test<-predict(modelo_ln_train,newdata=new)
y_test_pred <- exp(-4.4968)*exp(y_ln_test)
plot(test_datos_automoviles$GASTOFINANCIERO,y_test_pred,
xlab="GASTO FINANCIERO REAL",ylab = "GASO FINANCIERO ESTIMADO",main="GAsto Financiero Real Vs EStimado, Automotores",
las=1)
grid()
legend("bottomright",legend = c("dato"),pch=c(1,NA),lty=c(NA,1),
col=c(1,2),lwd=c(1,2))
y_test_pred <- exp(-4.4968)*exp(y_ln_test)
plot(test_datos_automoviles$GASTOFINANCIERO,y_test_pred,
xlab="GASTO FINANCIERO REAL",ylab = "GASO FINANCIERO ESTIMADO",main="GAsto Financiero Real Vs EStimado, Automotores",
las=1)
grid()
legend("bottomright",legend = c("dato"),pch=c(1,NA),lty=c(NA,1),
col=c(1,2),lwd=c(1,2))
y_ln_test<-predict(modelo_ln_train,newdata=ln_SOLO_VENTAS)
y_ln_test<-predict(modelo_ln_train,newdata=ln_SOLO_VENTAS)
y_test_pred <- exp(-4.4968)*exp(y_ln_test)
y_test_pred <- exp(-4.4968)*exp(y_ln_test)
y_ln_test<-predict(modelo_ln_train,newdata=ln_SOLO_VENTAS)
y_test_pred <- exp(-4.4968)*exp(y_ln_test)
y_test_pred <- exp(-4.4968)*exp(y_ln_test)
plot(test_datos_automoviles$GASTOFINANCIERO,y_test_pred,
xlab="GASTO FINANCIERO REAL",ylab = "GASO FINANCIERO ESTIMADO",main="GAsto Financiero Real Vs EStimado, Automotores",
las=1)
grid()
legend("bottomright",legend = c("dato"),pch=c(1,NA),lty=c(NA,1),
col=c(1,2),lwd=c(1,2))
View(test_datos_automoviles)
View(ventas_vs_gastofinanciero)
View(test_datos_automoviles)
GastoFin_Automotores <- log(test_datos_automoviles$GASTOFINANCIERO)
GastoFin_Automotores <- lexp(est_datos_automoviles$GASTOFINANCIERO)
GastoFin_Automotores <- exp(est_datos_automoviles$GASTOFINANCIERO)
GastoFin_Automotores <- exp(test_datos_automoviles$GASTOFINANCIERO)
plot(GastoFin_Automotores,y_test_pred,
xlab="GASTO FINANCIERO REAL",ylab = "GASO FINANCIERO ESTIMADO",main="GAsto Financiero Real Vs EStimado, Automotores",
las=1)
grid()
legend("bottomright",legend = c("dato"),pch=c(1,NA),lty=c(NA,1),
col=c(1,2),lwd=c(1,2))
View(SOLO_VENTAS)
View(test_datos_automoviles)
View(test_datos_automoviles)
SOLO_VENTAS <- data.frame(VENTAS = test_datos_automoviles$VENTAS)
y_ln_test<-predict(modelo_ln_train,newdata=SOLO_VENTAS)
y_test_pred <- exp(-4.4968)*exp(y_ln_test)
GastoFin_Automotores <- exp(test_datos_automoviles$GASTOFINANCIERO)
plot(GastoFin_Automotores,y_test_pred,
xlab="GASTO FINANCIERO REAL",ylab = "GASO FINANCIERO ESTIMADO",main="GAsto Financiero Real Vs EStimado, Automotores",
las=1)
grid()
legend("bottomright",legend = c("dato"),pch=c(1,NA),lty=c(NA,1),
col=c(1,2),lwd=c(1,2))
y_test_pred <- exp(y_ln_test)
GastoFin_Automotores <- exp(test_datos_automoviles$GASTOFINANCIERO)
plot(GastoFin_Automotores,y_test_pred,
xlab="GASTO FINANCIERO REAL",ylab = "GASO FINANCIERO ESTIMADO",main="GAsto Financiero Real Vs EStimado, Automotores",
las=1)
grid()
legend("bottomright",legend = c("dato"),pch=c(1,NA),lty=c(NA,1),
col=c(1,2),lwd=c(1,2))
View(ventas_vs_gastofinanciero)
mse_tr_lm<-mean((y_test_pred-GastoFin_Automotores)^2) # calcula el mse de entrenamiento
RMSE_tr_lm = sqrt(mse_tr_lm)
mse_tr_lm
Real_vs_Pred <- data.frame(y_test_pred,GastoFin_Automotores)
View(Real_vs_Pred)
head(Real_vs_Pred)
Real_vs_Pred <- data.frame(y_test_pred,GastoFin_Automotores)
plot_ly (data=Real_vs_pred,
x = ~y_test_pred_,
y = ~GastoFin_Automotores,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_lm,
name='Modelo lm',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
library(plotly)
plot_ly (data=Real_vs_pred,
x = ~y_test_pred_,
y = ~GastoFin_Automotores,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_lm,
name='Modelo lm',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
library(plotly)
plot_ly (data=Real_vs_Pred,
x = ~y_test_pred_,
y = ~GastoFin_Automotores,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_lm,
name='Modelo lm',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
# 80% of the sample size
smp_size <- floor(0.8 * nrow(datos_automotores))
set.seed(123)
train_id <- sample(seq_len(nrow(datos_automotores)), size = smp_size)
train_datos_automoviles <- datos_automotores[train_id, ]
test_datos_automoviles <- datos_automotores[-train_id, ]
modelo_ln_train<-lm(GASTOFINANCIERO~VENTAS,data=train_datos_automoviles,
subset=(SUBSECTOR=="AUTOMOTORES"))
summary(modelo_ln_train)
plot(train_datos_automoviles$VENTAS,train_datos_automoviles$GASTOFINANCIERO,
xlab="Ventas (log, COP, miles de millones)",ylab = "Gasto financiero (log, COP, miles de millones)",main="Ventas vs gasto financiero (2015), Edificaciones",
las=1)
abline(modelo_ln_train,col="red",lwd=2)
grid()
legend("bottomright",legend = c("Observados","Ajuste lineal"),pch=c(1,NA),lty=c(NA,1),
col=c(1,2),lwd=c(1,2))
SOLO_VENTAS <- data.frame(VENTAS = test_datos_automoviles$VENTAS)
y_ln_test<-predict(modelo_ln_train,newdata=SOLO_VENTAS)  #datos originales en logaritmo
y_test_pred <- exp(y_ln_test)
GastoFin_Automotores <- exp(test_datos_automoviles$GASTOFINANCIERO)
plot(GastoFin_Automotores,y_test_pred,
xlab="GASTO FINANCIERO REAL",ylab = "GASTO FINANCIERO ESTIMADO",main="GAsto Financiero Real Vs EStimado, Automotores",
las=1)
grid()
legend("bottomright",legend = c("dato"),pch=c(1,NA),lty=c(NA,1),
col=c(1,2),lwd=c(1,2))
mse_tr_lm<-mean((y_test_pred-GastoFin_Automotores)^2) # calcula el mse de entrenamiento
RMSE_tr_lm = sqrt(mse_tr_lm)
mse_tr_lm
Real_vs_Pred <- data.frame(y_test_pred,GastoFin_Automotores)
Real_vs_Pred <- data.frame(y_test_pred,GastoFin_Automotores)
View(Real_vs_Pred)
knitr::opts_chunk$set(echo = TRUE)
library (MASS)
library (ISLR)
install.packages("ISLR")
library (MASS)
library (ISLR)
library (MASS)
library (ISLR)
fix ( Boston )
names(Boston)
lm.fit =lm(medvâˆ¼lstat , data= Boston )
lm.fit
summary(lm.fit)
confint (lm.fit )
names (lm.fit )
predict (lm.fit , data. frame ( lstat =c (5 ,10 ,15) ),
predict (lm.fit , data.frame ( lstat =c(5 ,10 ,15) ),
interval =" confidence ")
predict (lm.fit , data.frame(lstat =c(5 ,10 ,15) ),
interval =" confidence ")
predict(lm.fit , data.frame(lstat =c(5 ,10 ,15) ),
interval =" confidence ")
predict(lm.fit , data.frame(lstat =c(5 ,10 ,15)),interval ="confidence")
predict(lm.fit , data.frame(lstat =c(5 ,10 ,15)),interval ="prediction")
plot(lstat ,medv )
plot(lstat ,medv)
attach(Boston)
plot(lstat ,medv)
plot(lstat ,medv)
abline (lm.fit)
abline (lm.fit ,lwd =3)
abline(lm.fit,lwd =3)
plot.new
abline(lm.fit,lwd =3)
abline(lm.fit,lwd =3)
plot(lstat ,medv)
abline (lm.fit)
abline(lm.fit,lwd =3)
abline(lm.fit,lwd =3, col ="red")
plot(lstat,medv,col="red")
plot(lstat,medv,pch=20)
plot(lstat,medv,pch="+")
plot (1:20,1:20,pch=1:20)
par ( mfrow =c(2 ,2) )
plot(lm.fit )
par ( mfrow =c(2 ,3))
plot(lm.fit )
par ( mfrow =c(2 ,2))
plot(lm.fit )
plot(lm.fit )
plot(predict(lm.fit),residuals(lm.fit ))
plot(predict(lm.fit),rstudent(lm.fit ))
plot( hatvalues (lm.fit))
which.max(hatvalues (lm.fit))
lm.fit =lm(medvâˆ¼lstat+age,data= Boston)
summary(lm.fit)
lm.fit =lm(medvâˆ¼.,data = Boston)
summary(lm.fit)
summary(lm.fit)$r.sq
summary(lm.fit)$sigma
library (car)
install.packages("car")
library (car)
vif (lm.fit)
lm.fit1=lm(medvâˆ¼.-age ,data= Boston )
summary(lm.fit1 )
summary (lm(medvâˆ¼lstat*age ,data = Boston ))
lm.fit2=lm(medvâˆ¼lstat +I( lstat ^2) )
summary (lm.fit2 )
par ( mfrow =c(2 ,2) )
plot(lm.fit2)
lm. fit5=lm(medvâˆ¼poly(lstat,5))
lm.fit5=lm(medvâˆ¼poly(lstat,5))
summary (lm.fit5 )
fix ( Carseats )
names ( Carseats )
lm.fit =lm(Salesâˆ¼.+Income:Advertising+Price:Age, data= Carseats)
summary(lm.fit)
attach(Carseats)
contrasts(ShelveLoc)
library(ISLR)
names(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
Hitters =na.omit(Hitters)  #elimina las filas con NA
dim(Hitters)
sum(is.na(Hitters))
install.packages("leaps")
library(leaps)  #libreria para hacer seleccion optima de variables
regfit.full= regsubsets(Salaryâˆ¼., Hitters )  #regresion con seleccion de variables
summary(regfit.full)
regfit.full= regsubsets ( Salaryâˆ¼., data=Hitters, nvmax =19)
regsummary = summary(regfit.full)
regfit.full= regsubsets ( Salaryâˆ¼., data=Hitters, nvmax =19) # con la opcion nvmax se puede hacer que se muestes N mejores mdoelos
regsummary = summary(regfit.full)
summary(regfit.full)
names(reg.summary)  #muestra los metodos a aplicar a summary
names(regfit.full)  #muestra los metodos a aplicar a summary
regfit.full= regsubsets ( Salaryâˆ¼., data=Hitters, nvmax =19) # con la opcion nvmax se puede hacer que se muestes N mejores mdoelos
regsummary = summary(regfit.full)  #lleva a una varaible el summary del modelo
summary(regfit.full)
names(regsummary)  #muestra los metodos a aplicar a summary
reg.summary$rsq
regsummary$rsq
regsummary$adjr2
par ( mfrow =c(2 ,2) )
plot(reg.summary$rss, xlab="Number of Variables", ylab ="RSS",type ="l")
par ( mfrow =c(2 ,2) )
plot(regsummary$rss, xlab="Number of Variables", ylab ="RSS",type ="l")
plot(regsummary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq", type="l")
par(mfrow =c(2 ,2))
plot(regsummary$rss, xlab="Number of Variables", ylab ="RSS",type ="l")
plot(regsummary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq", type="l")
par(mfrow =c(2,1))
plot(regsummary$rss, xlab="Number of Variables", ylab ="RSS",type ="l")
plot(regsummary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq", type="l")
par(mfrow =c(1,2))
plot(regsummary$rss, xlab="Number of Variables", ylab ="RSS",type ="l")
plot(regsummary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq", type="l")
which.max(reg.summary$adjr2)  #para mostrar cual modelo tiene el maximo R2 ajustado
which.max(regsummary$adjr2)  #para mostrar cual modelo tiene el maximo R2 ajustado
points(11, regsummary$adjr2[11], col="red", cex =2, pch =20)
par(mfrow =c(1,2))
plot(regsummary$rss, xlab="Number of Variables", ylab ="RSS",type ="l")
plot(regsummary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq", type="l")
points(11, regsummary$adjr2[11], col="red", cex =2, pch =20)
which.min (reg.summary$cp)  #cual punto tiene el minimo cp
which.min (regsummary$cp)  #cual punto tiene el minimo cp
plot(reg.summary$cp ,xlab="Number of Variables", ylab="Cp", type=â€™lâ€™)
plot(reg.summary$cp ,xlab="Number of Variables", ylab="Cp", type=â€™lâ€™)
plot(reg.summary$cp)
plot(regsummary$cp)
plot(regsummary$cp, xlab =" Number of Variables ")
plot(regsummary$cp, xlab =" Number of Variables ")
plot(regsummary$cp, xlab =" Number of Variables ", ylab =" Cp")
plot(regsummary$cp, xlab =" Number of Variables ", ylab =" Cp", type=â€™lâ€™)
plot(regsummary$cp, xlab =" Number of Variables ", ylab =" Cp", type='l')
plot(regsummary$cp, xlab =" Number of Variables ", ylab =" Cp", type='l')
points (10, regsummary$cp[10], col =" red ", cex =2, pch =20)
par(mfrow =c(2,2))
plot(regsummary$rss, xlab="Number of Variables", ylab ="RSS",type ="l")
plot(regsummary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq", type="l")
points(11, regsummary$adjr2[11], col="red", cex =2, pch =20)  #poins axtua sobre un grÃ¡fico existente
which.min(reg.summary$bic)
which.min(regsummary$bic)
plot(regsummary$bic, xlab =" Number of Variables ", ylab =" BIC ",type='l')
points(6, regsummary$bic[6], col =" red ",cex =2, pch =20)
plot( regfit.full , scale =" r2 ")
plot( regfit.full, scale ="r2")
plot( regfit.full, scale ="adjr2")
plot( regfit.full, scale ="Cp")
plot( regfit.full, scale ="bic")
coe(regfit.full,6)
coef(regfit.full,6)
regfit.fwd = regsubsets(Salaryâˆ¼.,data= Hitters, nvmax =19, method ="forward") #metodo hacia adelante de selecciÃ³n de parametros
summary(regfit.fwd)
regfit.bwd = regsubsets(Salaryâˆ¼., data=Hitters, nvmax =19, method ="backward")  #metodo hacia atrÃ¡s de selecciÃ³n de parametros
summary(regfit.bwd)
coef(regfit.full,7)
coef(regfit.fwd,7)
coef(regfit.bwd,7)
set.seed(1)
train=sample(c(TRUE , FALSE ),nrow( Hitters ),rep =TRUE )
test=(!train)
regfit.best= regsubsets(Salaryâˆ¼., data= Hitters [train ,],nvmax =19)
test.mat= model.matrix(Salaryâˆ¼., data=Hitters[test,])
val.errors=rep(NA,19)
for(i in 1:19) {
coefi=coef(regfit.best ,id=i)
pred=test.mat [,names(coefi)]%*% coefi
val.errors[i]= mean((Hitters$Salary[test]-pred)^2)
}
val.errors
which.min(val.errors)
coef(regfit.best,7)
install.packages(c("curl", "foreach", "iterators", "openssl", "quantreg", "Rcpp", "RSQLite"))
install.packages(c("curl", "foreach", "iterators", "openssl", "quantreg", "Rcpp", "RSQLite"))
install.packages(c("curl", "foreach", "iterators", "openssl", "quantreg", "Rcpp", "RSQLite"))
install.packages(c("curl", "foreach", "iterators", "openssl", "quantreg", "Rcpp", "RSQLite"))
install.packages(c("curl", "foreach", "iterators", "openssl", "quantreg", "Rcpp", "RSQLite"))
install.packages(c("curl", "foreach", "iterators", "openssl", "quantreg", "Rcpp", "RSQLite"))
install.packages(c("curl", "foreach", "iterators", "openssl", "quantreg", "Rcpp", "RSQLite"))
install.packages(c("curl", "foreach", "iterators", "openssl", "quantreg", "Rcpp", "RSQLite"))
install.packages(c("curl", "foreach", "iterators", "openssl", "quantreg", "Rcpp", "RSQLite"))
install.packages(c("curl", "foreach", "iterators", "openssl", "quantreg", "Rcpp", "RSQLite"))
install.packages(c("curl", "foreach", "iterators", "openssl", "quantreg", "Rcpp", "RSQLite"))
install.packages(c("curl", "foreach", "iterators", "openssl", "quantreg", "Rcpp", "RSQLite"))
install.packages(c("curl", "foreach", "iterators", "openssl", "quantreg", "Rcpp", "RSQLite"))
install.packages(c("curl", "foreach", "iterators", "openssl", "quantreg", "Rcpp", "RSQLite"))
install.packages(c("curl", "foreach", "iterators", "openssl", "quantreg", "Rcpp", "RSQLite"))
install.packages(c("curl", "foreach", "iterators", "openssl", "quantreg", "Rcpp", "RSQLite"))
install.packages(c("curl", "foreach", "iterators", "openssl", "quantreg", "Rcpp", "RSQLite"))
tinytex::install_tinytex()
tinytex:::is_tinytex()
install.packages("shiny")
shiny::runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba1')
library(shiny)
shiny::runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba1')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba1')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba1')
runApp()
runApp()
runApp()
runApp()
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba1')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba1')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba1')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba1')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba1')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba1')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba1')
library(mass)
attach(auto)
summary(auto)
head(auto)
library(ISLR)
attach(auto)
attach(Auto)
head(Auto)
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba1')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba2_PestaÃ±as')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba2_PestaÃ±as')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba2_PestaÃ±as')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba2_PestaÃ±as')
runApp()
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba2_PestaÃ±as')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba2_PestaÃ±as')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba2_PestaÃ±as')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba2_PestaÃ±as')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba2_PestaÃ±as')
runApp()
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba2_PestaÃ±as')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba2_PestaÃ±as')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba2_PestaÃ±as')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba2_PestaÃ±as')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba2_PestaÃ±as')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba2_PestaÃ±as')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba2_PestaÃ±as')
runApp()
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba2_PestaÃ±as')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba2_PestaÃ±as')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba2_PestaÃ±as')
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba2_PestaÃ±as')
suiss
runApp('C:/1_EFVO/4_GITHUB_CLONED/Basic-R-for-Machine-Learning/Shiny/Prueba2_PestaÃ±as')
install.packages("DT")
runApp('C:/1_EFVO/4_GITHUB_CLONED/Prediccion_Accidentalidad_Transito_Medellin/Shiny/Ejercicio_Regresion.R')
library(shiny); runApp('C:/1_EFVO/4_GITHUB_CLONED/Prediccion_Accidentalidad_Transito_Medellin/Shiny_Final/Shiny_prediccion.R')
rsconnect::setAccountInfo
library(shiny); runApp('C:/1_EFVO/4_GITHUB_CLONED/Prediccion_Accidentalidad_Transito_Medellin/Shiny_Final/Shiny_prediccion.R')
load(file="./data_modelos_diario/datos_pronostico_diario.Rda")
library(shiny); runApp('C:/1_EFVO/4_GITHUB_CLONED/Prediccion_Accidentalidad_Transito_Medellin/Shiny_Final/Shiny_prediccion.R')
setwd("C:/1_EFVO/4_GITHUB_CLONED/Prediccion_Accidentalidad_Transito_Medellin/Shiny_Final")
load(file="./data_modelos_diario/datos_pronostico_diario.Rda")
View(datos_pronostico_diario)
load(file="./data_modelos_semana/datos_pronostico_semanal.Rda")
View(datos_pronostico_semanal)
load(file="./data_modelos_mes/datos_pronostico_mensual.Rda")
View(datos_pronostico_diario)
View(datos_pronostico_semanal)
View(datos_pronostico_mensual)
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
load(file="Total_Dataset_Freq_S_semanal.Rda")
load(file="./Total_Dataset_Freq_S_semanal.Rda")
load(file="../Total_Dataset_Freq_S_semanal.Rda")
load("Total_Dataset_Freq_S_semanal.Rda")
setwd("C:/1_EFVO/4_GITHUB_CLONED/Prediccion_Accidentalidad_Transito_Medellin/Shiny_Final")
load("Total_Dataset_Freq_S_semanal.Rda")
load("./data_modelos_semana/Total_Dataset_Freq_S_semanal.Rda")
load("Total_Dataset_Freq_S_semanal.Rda")
load("Total_Dataset_Freq_S_semanal.Rda")
load("all.rda", .GlobalEnv)
attach("Total_Dataset_Freq_S_semana.rda")
attach("Total_Dataset_Freq_S_semana.Rda")
load("Total_Dataset_Freq_S_semanal.Rda")
runApp('Shiny_prediccion_v1.R')
getwd()
getwd()
setwd("C:/1_EFVO/4_GITHUB_CLONED/shiny_prediccion_accidentes")
getwd()
load("Total_Dataset_Freq_S_semanal.Rda")
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
runApp('Shiny_prediccion_v1.R')
library(rsconnect)
rsconnect::deployApp('C:\1_EFVO\4_GITHUB_CLONED\shiny_prediccion_accidentes')
library(rsconnect)
rsconnect::deployApp(r'C:\1_EFVO\4_GITHUB_CLONED\shiny_prediccion_accidentes')
